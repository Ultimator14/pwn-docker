#!/usr/bin/python

from pwn import *
from subprocess import run

# Config
BINARY = "./mybinary"

chost = "172.17.0.2"
tport = 4100
gport = 4101

rhost = "remotehost"
rport = 0

# Default setup
context.binary = BINARY

config_terminal = ["gnome-terminal", "--"]
config_gdb = ["gdb", "-q"]
#config_gdbinit = "~/.gdbinit-gef"
config_gdbinit = "~/.gdbinit"

#config_remote = f"gef-remote {chost} {str(gport)}"
config_remote = f"target remote {chost}:{str(gport)}"

config_gdbscript = """
r
b main
c
"""

# Computed config
gdbscript_split = [x for x in config_gdbscript.split("\n") if x]
gdbscript_command_list = [x for pairs in zip(["-ex"]*len(gdbscript_split), gdbscript_split) for x in pairs]

gdb_command = config_terminal + config_gdb + ["-nh", BINARY, "-x", config_gdbinit, "-ex", config_remote] + gdbscript_command_list

local = True

if local:
    def sh_init():
        # debug
        sh = remote(chost, tport)
        run(gdb_command)

        # initial gdb outputs
        _ = sh.recvline()  # gdbserver: Error disabling address space randomization: Operation not permitted
        _ = sh.recvline()  # Process ./mybinary created; pid = ...
        _ = sh.recvline()  # Listening on port 4101
        _ = sh.recvline()  # Remote debugging from host 172.17.0.1, port ...

        return sh
else:
    def sh_init():
        sh = remote(rhost, rport)
        return sh

# Exploit
sh = sh_init()

#print(sh.recv())
#print(sh.recvline())
#print(sh.recvuntil("mystr"))

#sh.send("")
#sh.sendline("")

#sh.interactive()

#sh.close()
